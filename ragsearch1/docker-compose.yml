version: '3.8'

services:
  # ====================
  # API Service
  # ====================
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ragsearch1-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - API_HOST=0.0.0.0
      - API_PORT=8000

      # Database URLs
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}

      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000

      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PLAID_CLIENT_ID=${PLAID_CLIENT_ID}
      - PLAID_SECRET=${PLAID_SECRET}
      - BELVO_SECRET_ID=${BELVO_SECRET_ID}
      - BELVO_SECRET_PASSWORD=${BELVO_SECRET_PASSWORD}

      # Other settings
      - SECRET_KEY=${SECRET_KEY}
      - SCHEDULER_ENABLE=${SCHEDULER_ENABLE:-true}

    depends_on:
      - postgres
      - redis
      - chromadb
    networks:
      - ragsearch1_network
    volumes:
      - ./logs:/var/log/ragsearch1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ====================
  # PostgreSQL Database
  # ====================
  postgres:
    image: postgres:15-alpine
    container_name: ragsearch1-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ragsearch1}
      - POSTGRES_USER=${POSTGRES_USER:-ragsearch1}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ragsearch1_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ragsearch1}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ====================
  # Redis Cache
  # ====================
  redis:
    image: redis:7-alpine
    container_name: ragsearch1-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ragsearch1_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ====================
  # ChromaDB Vector Database
  # ====================
  chromadb:
    image: chromadb/chroma:latest
    container_name: ragsearch1-chromadb
    restart: unless-stopped
    ports:
      - "${CHROMA_PORT:-8001}:8000"
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - ragsearch1_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ====================
  # Prometheus Monitoring
  # ====================
  prometheus:
    image: prom/prometheus:latest
    container_name: ragsearch1-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - ragsearch1_network
    profiles:
      - monitoring

  # ====================
  # Grafana Dashboard
  # ====================
  grafana:
    image: grafana/grafana:latest
    container_name: ragsearch1-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ragsearch1_network
    profiles:
      - monitoring

  # ====================
  # Nginx Reverse Proxy (Optional)
  # ====================
  nginx:
    image: nginx:alpine
    container_name: ragsearch1-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - ragsearch1_network
    profiles:
      - production

# ====================
# Networks
# ====================
networks:
  ragsearch1_network:
    driver: bridge

# ====================
# Volumes
# ====================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
